{"ast":null,"code":"var _jsxFileName = \"/Users/max/Desktop/bootcamp_2022/fpc-fullstack/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header.js\";\nimport InputField from \"./components/InputField.js\";\nimport BodyPanel from \"./components/BodyPanel.js\";\nimport Subpanel from \"./components/Subpanel.js\";\n\n//returns an array of all ingredient names\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function getAllIngredientNames() {\n  let allIngredientNames = [];\n\n  //send server request\n  let response = await fetch(\"/api\", {\n    method: \"GET\"\n  });\n\n  //parse server response\n  const serverData = await response.json();\n  const tableObjects = serverData.body;\n  for (let i = 0; i < tableObjects.length; i++) {\n    allIngredientNames.push(tableObjects[i].name);\n  }\n  return allIngredientNames;\n}\nfunction App() {\n  _s();\n  //state\n  const [requestedIngredients, setRequestedIngredients] = useState([\"apple\", \"bacon\"]);\n  const [resultIngredients, setResultIngredients] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      //ask the server for a list of common pairings of requestedIngredients\n      console.log(\"fetching data...\");\n      const response = await fetch(\"/api\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          ingredients: requestedIngredients\n        })\n      });\n      const data = await response.json();\n      setResultIngredients(data.body);\n    }\n    if (requestedIngredients.length >= 1) {\n      fetchData();\n    } else {\n      setResultIngredients([]);\n    }\n  }, [requestedIngredients]);\n  function addRequestedIngredient(ingredient) {\n    if (isValidIngredientName(ingredient)) {\n      setRequestedIngredients([...requestedIngredients, ingredient]);\n    } else {\n      alert(`\"${ingredient}\" is not the name of an ingredient in our database.`);\n    }\n  }\n  function removeRequestedIngredient(name) {\n    const updatedList = requestedIngredients.filter(ingredient => ingredient !== name);\n    setRequestedIngredients(updatedList);\n  }\n  async function isValidIngredientName(name) {\n    const allIngredientNames = await getAllIngredientNames();\n    return allIngredientNames.includes(name);\n  }\n\n  //component tree\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputField, {\n      addRequestedIngredient: addRequestedIngredient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BodyPanel, {\n      children: [/*#__PURE__*/_jsxDEV(Subpanel, {\n        type: \"requests\",\n        removeRequestedIngredient: removeRequestedIngredient,\n        ingredientList: requestedIngredients\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        id: \"arrow-icon\",\n        className: \"fa-regular fa-circle-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Subpanel, {\n        type: \"results\",\n        addRequestedIngredient: addRequestedIngredient,\n        ingredientList: resultIngredients\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"4bPGZ4dedgNypiprUPNZ4CI1NQ8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Header","InputField","BodyPanel","Subpanel","getAllIngredientNames","allIngredientNames","response","fetch","method","serverData","json","tableObjects","body","i","length","push","name","App","requestedIngredients","setRequestedIngredients","resultIngredients","setResultIngredients","fetchData","console","log","headers","JSON","stringify","ingredients","data","addRequestedIngredient","ingredient","isValidIngredientName","alert","removeRequestedIngredient","updatedList","filter","includes"],"sources":["/Users/max/Desktop/bootcamp_2022/fpc-fullstack/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header.js\";\nimport InputField from \"./components/InputField.js\";\nimport BodyPanel from \"./components/BodyPanel.js\";\nimport Subpanel from \"./components/Subpanel.js\";\n\n//returns an array of all ingredient names\nasync function getAllIngredientNames() {\n  let allIngredientNames = [];\n\n  //send server request\n  let response = await fetch(\"/api\", {\n    method: \"GET\",\n  });\n\n  //parse server response\n  const serverData = await response.json();\n  const tableObjects = serverData.body;\n  for (let i = 0; i < tableObjects.length; i++) {\n    allIngredientNames.push(tableObjects[i].name);\n  }\n\n  return allIngredientNames;\n}\n\nfunction App() {\n  //state\n  const [requestedIngredients, setRequestedIngredients] = useState([\n    \"apple\",\n    \"bacon\",\n  ]);\n\n  const [resultIngredients, setResultIngredients] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      //ask the server for a list of common pairings of requestedIngredients\n      console.log(\"fetching data...\");\n      const response = await fetch(\"/api\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ ingredients: requestedIngredients }),\n      });\n\n      const data = await response.json();\n      setResultIngredients(data.body);\n    }\n\n    if (requestedIngredients.length >= 1) {\n      fetchData();\n    } else {\n      setResultIngredients([]);\n    }\n  }, [requestedIngredients]);\n\n  function addRequestedIngredient(ingredient) {\n    if (isValidIngredientName(ingredient)) {\n      setRequestedIngredients([...requestedIngredients, ingredient]);\n    } else {\n      alert(\n        `\"${ingredient}\" is not the name of an ingredient in our database.`\n      );\n    }\n  }\n\n  function removeRequestedIngredient(name) {\n    const updatedList = requestedIngredients.filter(\n      (ingredient) => ingredient !== name\n    );\n\n    setRequestedIngredients(updatedList);\n  }\n\n  async function isValidIngredientName(name) {\n    const allIngredientNames = await getAllIngredientNames();\n\n    return allIngredientNames.includes(name);\n  }\n\n  //component tree\n  return (\n    <>\n      <Header />\n      <InputField addRequestedIngredient={addRequestedIngredient} />\n      <BodyPanel>\n        <Subpanel\n          type=\"requests\"\n          removeRequestedIngredient={removeRequestedIngredient}\n          ingredientList={requestedIngredients}\n        ></Subpanel>\n        <i id=\"arrow-icon\" className=\"fa-regular fa-circle-right\"></i>\n        <Subpanel\n          type=\"results\"\n          addRequestedIngredient={addRequestedIngredient}\n          ingredientList={resultIngredients}\n        ></Subpanel>\n      </BodyPanel>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}